{"version":3,"sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/AppFeedback/App.styled.jsx","components/AppFeedback/App.js","index.js"],"names":["Title","styled","h1","MySection","section","Section","children","title","Wrapper","div","Button","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","id","onClick","Provider","value","color","className","toUpperCase","slice","Wrap","PositivePercentage","Line","Statistics","good","neutral","bad","total","positivePercentage","strokeColor","percent","NotificationTitel","h2","Notification","message","AppWrap","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","prev","Math","round","Number","isNaN","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca710379.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 32px;\r\n  margin-bottom: 40px;\r\n`;\r\n\r\nexport const MySection = styled.section`\r\n  text-align: center;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Title, MySection } from './Section.styled';\r\n\r\nexport default function Section({ children, title }) {\r\n  return (\r\n    <MySection>\r\n      <Title>{title}</Title>\r\n      {children}\r\n    </MySection>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  cildren: PropTypes.node,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 50px;\r\n  /* padding-left: 30px; */\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 120px;\r\n  align-items: center;\r\n  padding: 8px 10px;\r\n  border: 1px solid #c9c1c1;\r\n  border-radius: 14px;\r\n  font-style: italic;\r\n  font-weight: 700;\r\n  font-size: 18px;\r\n  line-height: 20px;\r\n  letter-spacing: 0.03em;\r\n  text-align: center;\r\n  color: #5c6061;\r\n  background-color: #fff;\r\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\r\n    0px 2px 1px rgba(0, 0, 0, 0.2);\r\n  cursor: pointer;\r\n\r\n  &:not(:last-child) {\r\n    margin-right: 15px;\r\n  }\r\n  &:hover {\r\n    background-color: #15e7ee29;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Wrapper, Button } from './FeedbackOptions.styled';\r\n\r\nimport { ImHappy, ImSad, ImNeutral } from 'react-icons/im';\r\nimport { IconContext } from 'react-icons';\r\n\r\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <Wrapper>\r\n      {options.map(option => {\r\n        switch (option) {\r\n          case 'good':\r\n            return (\r\n              <Button\r\n                key={option}\r\n                type=\"button\"\r\n                id={option}\r\n                onClick={onLeaveFeedback}\r\n              >\r\n                <IconContext.Provider\r\n                  value={{\r\n                    color: '#178036',\r\n                    className: 'react-icons',\r\n                  }}\r\n                >\r\n                  <ImHappy id={option} />\r\n                </IconContext.Provider>\r\n                {option[0].toUpperCase() + option.slice(1)}\r\n              </Button>\r\n            );\r\n\r\n          case 'neutral':\r\n            return (\r\n              <Button\r\n                key={option}\r\n                type=\"button\"\r\n                id={option}\r\n                onClick={onLeaveFeedback}\r\n              >\r\n                <IconContext.Provider\r\n                  value={{\r\n                    color: '#dfd10d',\r\n                    className: 'react-icons',\r\n                  }}\r\n                >\r\n                  <ImNeutral id={option} />\r\n                </IconContext.Provider>\r\n                {option[0].toUpperCase() + option.slice(1)}\r\n              </Button>\r\n            );\r\n\r\n          case 'bad':\r\n            return (\r\n              <Button\r\n                key={option}\r\n                type=\"button\"\r\n                id={option}\r\n                onClick={onLeaveFeedback}\r\n              >\r\n                <IconContext.Provider\r\n                  value={{\r\n                    color: '#df0d0d',\r\n                    className: 'react-icons',\r\n                  }}\r\n                >\r\n                  <ImSad id={option} />\r\n                </IconContext.Provider>\r\n                {option[0].toUpperCase() + option.slice(1)}\r\n              </Button>\r\n            );\r\n\r\n          default:\r\n            return null;\r\n        }\r\n      })}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\n// (\r\n//         <Button\r\n//           key={option}\r\n//           type=\"button\"\r\n//           name={option}\r\n//           onClick={onLeaveFeedback}\r\n//         >\r\n//           {option[0].toUpperCase() + option.slice(1)}\r\n//         </Button>\r\n//       )\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Wrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  padding-left: 40px;\r\n\r\n  & p {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 72%;\r\n    font-style: italic;\r\n    font-weight: 500;\r\n    font-size: 24px;\r\n    line-height: 22px;\r\n    letter-spacing: 0.03em;\r\n    color: #5c6061;\r\n  }\r\n  & p:not(:last-child) {\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nexport const PositivePercentage = styled.div`\r\n  margin-top: 30px;\r\n  font-style: bold;\r\n  font-weight: 500;\r\n  font-size: 30px;\r\n  letter-spacing: 0.03em;\r\n\r\n  & span {\r\n    margin-right: 20px;\r\n  }\r\n`;\r\n\r\nexport const Line = styled.div`\r\n  width: 80%;\r\n  height: 1px;\r\n  margin-bottom: 20px;\r\n  border: 1px solid #5c6061;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Wrap, PositivePercentage, Line } from './Statistics.styled';\r\n\r\nimport { Progress } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <Wrap>\r\n      <p>\r\n        <span>Good:</span> <span>{good}</span>\r\n      </p>\r\n      <p>\r\n        <span>Neutral:</span> <span>{neutral}</span>\r\n      </p>\r\n      <p>\r\n        <span>Bad:</span> <span>{bad}</span>\r\n      </p>\r\n      <Line />\r\n      <p>\r\n        <span>Total:</span> <span>{total}</span>\r\n      </p>\r\n      <PositivePercentage>\r\n        <span>Positive feedback:</span>\r\n        <Progress\r\n          type=\"circle\"\r\n          strokeColor={{\r\n            '0%': '#108ee9',\r\n            '100%': '#87d068',\r\n          }}\r\n          percent={positivePercentage}\r\n        />\r\n        {/* <ShowPercentage>{positivePercentage} %</ShowPercentage> */}\r\n      </PositivePercentage>\r\n    </Wrap>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const NotificationTitel = styled.h2`\r\n  text-align: center;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { NotificationTitel } from './Notification.styled';\r\n\r\nexport default function Notification({ message }) {\r\n  return <NotificationTitel>{message}</NotificationTitel>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const AppWrap = styled.div`\r\n  padding: 40px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 600px;\r\n  margin: 40px auto 0;\r\n  border: 1px solid #c9c1c1;\r\n  border-radius: 30px;\r\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\r\n    0px 2px 1px rgba(0, 0, 0, 0.2);\r\n`;\r\n","import { useState } from 'react';\r\n\r\nimport Section from '../Section';\r\nimport FeedbackOptions from '../FeedbackOptions';\r\nimport Statistics from '../Statistics';\r\nimport Notification from '../Notification/';\r\n\r\nimport { AppWrap } from './App.styled';\r\n\r\nimport React from 'react';\r\n\r\nexport default function App() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const options = ['good', 'neutral', 'bad'];\r\n\r\n  const onLeaveFeedback = e => {\r\n    const name = e.target.id;\r\n\r\n    switch (name) {\r\n      case 'good':\r\n        setGood(prev => prev + 1);\r\n        break;\r\n\r\n      case 'neutral':\r\n        setNeutral(prev => prev + 1);\r\n        break;\r\n\r\n      case 'bad':\r\n        setBad(prev => prev + 1);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const countTotalFeedback = () => {\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    const positivePercentage = Math.round((good / countTotalFeedback()) * 100);\r\n\r\n    return Number.isNaN(positivePercentage) ? 0 : positivePercentage;\r\n    //   < 30\r\n    // ? `🙁 ${positivePercentage}`\r\n    // : positivePercentage < 60\r\n    // ? `😐 ${positivePercentage}`\r\n    // : positivePercentage < 80\r\n    // ? `🙂 ${positivePercentage}`\r\n    // : `😊 ${positivePercentage}`;\r\n  };\r\n\r\n  return (\r\n    <AppWrap>\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions options={options} onLeaveFeedback={onLeaveFeedback} />\r\n      </Section>\r\n      {countTotalFeedback() ? (\r\n        <Section title=\"Statistics\">\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={countTotalFeedback()}\r\n            positivePercentage={countPositiveFeedbackPercentage()}\r\n          />\r\n        </Section>\r\n      ) : (\r\n        <Notification message=\"No feedback given\"></Notification>\r\n      )}\r\n    </AppWrap>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/AppFeedback';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}